import asyncio
import logging
import random

from aiogram import Router, types
from bot.AI.gigachat_client import Gigachat
from bot.utils.update_cache_limit_meseges import update_user_limit, get_user_limit
from database import add_new_user_to_db, save_message

router = Router()


@router.message()
async def handle_message(message: types.Message):
    tg_id = message.from_user.id
    user = message.from_user
    giga = Gigachat()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    success = await add_new_user_to_db(user.id, user.username)

    if not success:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚Ä¶ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üôà")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    limit = int(await get_user_limit(tg_id))
    if limit <= 0:
        await message.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –∫–æ–Ω—á–∏–ª—Å—è üòÖ –î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ üí¨")
        return

    await save_message(tg_id, "user", message.text)

    response = await giga.resp_giga(tg_id=user.id, text=message.text)

    # –§–∏–ª—å—Ç—Ä –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if '–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏' in response.lower() or '–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è' in response.lower():
        response = random.choice([
            "–û–π, –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å üòÖ –î–∞–≤–∞–π –ª—É—á—à–µ –ø—Ä–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –ª–∞–¥–Ω–æ?",
            "–•–∞, –≤–æ—Ç —ç—Ç–æ –≤–æ–ø—Ä–æ—Å! –î–∞–∂–µ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å üòÖ",
            "–°–ª—É—à–∞–π, —Å–ª–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å‚Ä¶ –¥–∞–≤–∞–π –ª—É—á—à–µ –ø—Ä–æ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–≤–µ—Å–µ–ª–µ–µ üòâ",
            "–•–º–º‚Ä¶ —è —Å–µ–π—á–∞—Å –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ—Ä—è–ª–∞—Å—å üòÖ",
            "–ê –≤–æ—Ç —ç—Ç–æ —Å–µ–∫—Ä–µ—Ç ü§´"
        ])

    # ‚è≥ –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞ (0.03‚Äì0.06 —Å–µ–∫ –Ω–∞ —Å–∏–º–≤–æ–ª)
    typing_time = min(max(len(response) * random.uniform(0.03, 0.06), 2), 10)

    # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ "–ø–µ—Ä–µ—Ä—ã–≤—ã", –∫–∞–∫ –±—É–¥—Ç–æ –∑–∞–¥—É–º–∞–ª–∞—Å—å
    break_points = sorted(random.sample(range(1, int(typing_time)), k=min(2, int(typing_time)//2))) if typing_time > 4 else []

    await message.bot.send_chat_action(message.chat.id, "typing")

    elapsed = 0
    for bp in break_points:
        await asyncio.sleep(bp - elapsed)
        elapsed = bp
        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç—å", –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await message.bot.send_chat_action(message.chat.id, "typing")
        await asyncio.sleep(random.uniform(0.3, 0.8))

    # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ "–Ω–∞–±–æ—Ä–∞"
    await asyncio.sleep(max(typing_time - elapsed, 0.5))

    await save_message(tg_id, "bot", response)

    await message.answer(response)
    # üí° –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    await update_user_limit(tg_id, limit - 1)